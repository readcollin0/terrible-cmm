#(include "lib/draw.cmm")
#(include "lib/io.cmm")
#(include "lib/timer.cmm")


#(define COLOR_SKY 0x7ef)
#(define COLOR_SNOW 0xfff)
#(define COLOR_STONE 0x999)
#(define COLOR_GRASS 0x292)
#(define COLOR_TREE 0x751)

#(define HEIGHT_MOUNTAIN 13)
#(define HEIGHT_SNOW 20)

#(define TICK_TIME 33)

#(define NUM_HEIGHTS 113)
heights = array {
	11, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23,
	24, 25, 24, 23, 23, 22, 21, 21, 20, 19, 18, 15, 15, 14, 13, 13, 12, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10, 
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23,
	24, 25, 24, 23, 23, 22, 21, 21, 20, 19, 18, 15, 15, 14, 13, 13, 12, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10, 
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10
};

heights_bak = array {
	11, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23,
	24, 25, 24, 23, 23, 22, 21, 21, 20, 19, 18, 15, 15, 14, 13, 13, 12, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10, 
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23,
	24, 25, 24, 23, 23, 22, 21, 21, 20, 19, 18, 15, 15, 14, 13, 13, 12, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10, 
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10
};

func main() {
	timer_init();
	heights_integrity_check();
	while (1) {
		draw_sky();
		draw_heights();
		heights_integrity_check();
//		timer_wait_for_tick(TICK_TIME);
	}
}

integrity_error_str = "INTEGRITY ERROR";
n_str = "n";
h1_str = "h1";
h2_str = "h2";
h1v_str = "h1v";
h2v_str = "h2v";
func heights_integrity_check() {
	savvar h1 = heights;
	savvar h2 = heights_bak;
	
	savvar h1v, h2v;
	savvar n = 0;
	
	while (n <= NUM_HEIGHTS) {
		h1v = load h1[0];
		h2v = load h2[0];
		
		
		if (h1v != h2v) {
			draw_set_color(0xF00, 0x000);
			draw_str_at(0, 0, integrity_error_str, 15);
			io_uart_write_str(integrity_error_str, 15, h1);
			io_uart_write_newline();
			io_uart_display_num(n_str, 1, n);
			io_uart_display_num(h1_str, 2, h1);
			io_uart_display_num(h2_str, 2, h2);
			io_uart_display_num(h1v_str, 3, h1v);
			io_uart_display_num(h2v_str, 3, h2v);
			
			while (1);
		}
		
		n += 1;
		h1 += 4;
		h2 += 4;
	}
}

func inc_leds() {
	tmpvar value, addr = MMIO_LED;
	value = load addr[0];
	value += 1;
	store addr[0] = value;
}

func draw_sky() {
	draw_set_color(COLOR_SKY, COLOR_SKY);
	draw_fill_background(0x20);
}


#(define LOOP_PROGRESS (- NUM_HEIGHTS MMIO_VGA_WIDTH))
heights_progress = 0;
progress_str = "progress";
heights_addr_str = "heights_addr";
n1_str = "n1";
height_str = "height";
func draw_heights() {
	// Load progress
	tmpvar progress;
	progress = load heights_progress;
	
	// Determine loop lengths.
	savvar n1, n2;
	if (progress < LOOP_PROGRESS) {
		n1 = MMIO_VGA_WIDTH;
		n2 = 0;
	}
	else {
		n1 = NUM_HEIGHTS;
		n1 -= progress;
		n2 = progress - LOOP_PROGRESS;
	}
	
	// Setup heights address
	savvar heights_addr = heights;
	progress <<= 2;
	heights_addr += progress;
	progress >>= 2;
	
	progress += 1;
	if (progress >= NUM_HEIGHTS)
		progress = 0;
	store heights_progress = progress;
	
//	io_uart_display_num(progress_str, 8, progress);
	retire progress;
	
	
	savvar height; // Only used 
	savvar x = 0;

draw_heights_loop:
//	io_uart_display_num(n1_str, 2, n1);
	while (n1) {
		height = load heights_addr[0];
		draw_height(x, height);
//		io_uart_display_num(heights_addr_str, 12, heights_addr);
//		io_uart_display_num(height_str, 6, height);
		x += 1;
		heights_addr += 4;
		n1 -= 1;
	}
	
	if (n2) {
		n1 = n2;
		n2 = 0;
		heights_addr = load heights;
		goto draw_heights_loop;
	}
}

#(define BOTTOM_LEFT_ADDR (+ MMIO_VGA_BASE (ash (1- MMIO_VGA_HEIGHT) MMIO_VGA_ROW_SHIFT)))
addr_str = "addr";
func draw_height(x, savvar height) {
	savvar addr = BOTTOM_LEFT_ADDR;
	savvar y = 0; // More like current height.
	savvar char = 0x20; // Space character.
	x <<= 2;
	addr |= x;
	
//	io_uart_display_num(addr_str, 4, addr);
	draw_set_color(0, COLOR_GRASS);
	while (y < HEIGHT_MOUNTAIN) {
		store addr[0] = char;
		y += 1;
		goto dh_done (y >= height);
		addr -= MMIO_VGA_ROW_OFFSET; // Go up one row.
	}
	
	draw_set_color(0, COLOR_STONE);
	while (y < HEIGHT_SNOW) {
		store addr[0] = char;
		y += 1;
		goto dh_done (y >= height);
		addr -= MMIO_VGA_ROW_OFFSET; // Go up one row.
	}
	
	draw_set_color(0, COLOR_SNOW);
	while (y < height) {
		store addr[0] = char;
		y += 1;
		addr -= MMIO_VGA_ROW_OFFSET; // Go up one row.
	}
//	io_uart_display_num(addr_str, 4, addr);
	
dh_done:
}