










func draw_get_addr(x, y) {
	tmpvar addr = 32768;
	x <<= 2;
	addr |= x;
	y <<= 9;
	addr |= y;
}

func draw_char_at(x, y, char) {
	tmpvar addr = 32768;
	x <<= 2;
	addr |= x;
	y <<= 9;
	addr |= y;
	
	store addr[0] = char;
}

func draw_set_color(fg, bg) {
	tmpvar addr = 32564;	
	bg <<= 12;
	
	tmpvar color = fg | bg;
	store addr[0] = color;
}

func draw_str_at(x, y, str, len) {
	tmpvar addr = 32768;
	x <<= 2;
	addr |= x;
	y <<= 9;
	addr |= y;
	
	while (len > 0) {
		tmpvar char;
		
		char = load str[0];
		char &= 0xff;
		store addr[0] = char;
		len -= 1;
		addr += 4;
		str += 4;
	}
}

func draw_fill_background(char) {
	tmpvar ptr = 32768;
	tmpvar x = 0, y = 0;
	
	while (y < 30) {
		while (x < 80) {
			store ptr[0] = char;
			ptr += 4;
			x += 1;
		}
		
		x = 0;
		ptr &= 4294966787;
		ptr += 512;
		y += 1;
	}
}



func io_set_leds(val) {
	tmpvar addr = 32512;
	store addr[0] = val;
}

func io_set_7seg(val) {
	tmpvar addr = 32536,
		   mask = 0xffff;
	val &= mask;
	store addr[0] = val;
}

func io_get_buttons() {
	tmpvar addr = 32548;
	ret0 = load addr[0];
}

func io_uart_write_str(savvar str, savvar len) {
	tmpvar char;
	
	while (len > 0) {
		char = load str[0];
		io_uart_write(char);
		str += 4;
		len -= 1;
	}
}

func io_uart_write_num(savvar num) {
	savvar mask = 0xf0000000;
	savvar n = 8;
	
	while (n > 0) {
		tmpvar char = num & mask;
		char >>= 28;
		char += 0x30;
		
		if (char > 0x39)
			char += 0x27;
		
		io_uart_write(char);
		
		n -= 1;
		num <<= 4;
	}
}

func io_uart_write_newline() {
	io_uart_write(0xa);
	io_uart_write(0xd);
}

func io_uart_display_num(str, len, savvar num) {
	io_uart_write_str(str, len);
	io_uart_write(0x3a);
	io_uart_write(0x20);
	io_uart_write_num(num);
	io_uart_write_newline();
}

func io_uart_write(char) {
	tmpvar tx_addr = 32520, busy;
	do {
		busy = load tx_addr[0];
	} while (busy);
	store tx_addr[0] = char;
}




last_buttons = 0;
func io_get_pressed_buttons() {
	tmpvar addr = 32548,
		   buttons;
	buttons = load addr[0];
	
	tmpvar last;
	last = load last_buttons;
	last ^= -1; // NOT pressed last time
	last &= buttons; // We want pressed now, and not pressed last time.
	
	store last_buttons = buttons;
	
	return last;
}

func io_wait_for_button_press() {
	ret0 = 0;
	while (ret0 == 0)
		io_get_pressed_buttons();
}



func timer_init() {
	tmpvar addr = 32560;
	store addr[0] = zero; // "zero" is a permanent variable that is always zero.
}

timer_last_tick = 0;
func timer_wait_for_tick(interval) {
	tmpvar addr = 32560;
	tmpvar timer, until;
	
	until = load timer_last_tick;
	until += interval;
	
	do {
		timer = load addr[0];
	} while (timer < until);
	
	store timer_last_tick = until;
}






heights = array {
	11, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23,
	24, 25, 24, 23, 23, 22, 21, 21, 20, 19, 18, 15, 15, 14, 13, 13, 12, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10, 
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23,
	24, 25, 24, 23, 23, 22, 21, 21, 20, 19, 18, 15, 15, 14, 13, 13, 12, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10, 
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10
};

heights_bak = array {
	11, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23,
	24, 25, 24, 23, 23, 22, 21, 21, 20, 19, 18, 15, 15, 14, 13, 13, 12, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10, 
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
	11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23,
	24, 25, 24, 23, 23, 22, 21, 21, 20, 19, 18, 15, 15, 14, 13, 13, 12, 11,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10, 
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10,
		10, 10, 10, 10, 10,	10, 10, 10, 10, 10,	10, 10, 10
};

func main() {
	timer_init();
	heights_integrity_check();
	while (1) {
		draw_sky();
		draw_heights();
		heights_integrity_check();
//		timer_wait_for_tick(33);
	}
}

integrity_error_str = "INTEGRITY ERROR";
n_str = "n";
h1_str = "h1";
h2_str = "h2";
h1v_str = "h1v";
h2v_str = "h2v";
func heights_integrity_check() {
	savvar h1 = heights;
	savvar h2 = heights_bak;
	
	savvar h1v, h2v;
	savvar n = 0;
	
	while (n <= 113) {
		h1v = load h1[0];
		h2v = load h2[0];
		
		
		if (h1v != h2v) {
			draw_set_color(0xF00, 0x000);
			draw_str_at(0, 0, integrity_error_str, 15);
			io_uart_write_str(integrity_error_str, 15, h1);
			io_uart_write_newline();
			io_uart_display_num(n_str, 1, n);
			io_uart_display_num(h1_str, 2, h1);
			io_uart_display_num(h2_str, 2, h2);
			io_uart_display_num(h1v_str, 3, h1v);
			io_uart_display_num(h2v_str, 3, h2v);
			
			while (1);
		}
		
		n += 1;
		h1 += 4;
		h2 += 4;
	}
}

func inc_leds() {
	tmpvar value, addr = 32512;
	value = load addr[0];
	value += 1;
	store addr[0] = value;
}

func draw_sky() {
	draw_set_color(2031, 2031);
	draw_fill_background(0x20);
}


heights_progress = 0;
progress_str = "progress";
heights_addr_str = "heights_addr";
n1_str = "n1";
height_str = "height";
func draw_heights() {
	// Load progress
	tmpvar progress;
	progress = load heights_progress;
	
	// Determine loop lengths.
	savvar n1, n2;
	if (progress < 33) {
		n1 = 80;
		n2 = 0;
	}
	else {
		n1 = 113;
		n1 -= progress;
		n2 = progress - 33;
	}
	
	// Setup heights address
	savvar heights_addr = heights;
	progress <<= 2;
	heights_addr += progress;
	progress >>= 2;
	
	progress += 1;
	if (progress >= 113)
		progress = 0;
	store heights_progress = progress;
	
//	io_uart_display_num(progress_str, 8, progress);
	retire progress;
	
	
	savvar height; // Only used 
	savvar x = 0;

draw_heights_loop:
//	io_uart_display_num(n1_str, 2, n1);
	while (n1) {
		height = load heights_addr[0];
		draw_height(x, height);
//		io_uart_display_num(heights_addr_str, 12, heights_addr);
//		io_uart_display_num(height_str, 6, height);
		x += 1;
		heights_addr += 4;
		n1 -= 1;
	}
	
	if (n2) {
		n1 = n2;
		n2 = 0;
		heights_addr = load heights;
		goto draw_heights_loop;
	}
}

addr_str = "addr";
func draw_height(x, savvar height) {
	savvar addr = 47616;
	savvar y = 0; // More like current height.
	savvar char = 0x20; // Space character.
	x <<= 2;
	addr |= x;
	
//	io_uart_display_num(addr_str, 4, addr);
	draw_set_color(0, 658);
	while (y < 13) {
		store addr[0] = char;
		y += 1;
		goto dh_done (y >= height);
		addr -= 512; // Go up one row.
	}
	
	draw_set_color(0, 2457);
	while (y < 20) {
		store addr[0] = char;
		y += 1;
		goto dh_done (y >= height);
		addr -= 512; // Go up one row.
	}
	
	draw_set_color(0, 4095);
	while (y < height) {
		store addr[0] = char;
		y += 1;
		addr -= 512; // Go up one row.
	}
//	io_uart_display_num(addr_str, 4, addr);
	
dh_done:
}
